import pandas as pd
from datetime import datetime
from datetime import date
import re
from pandas import DataFrame
import Variables as variables

df = pd.read_csv(variables.online_orders,encoding='latin-1')
df_bom = pd.read_csv(variables.BOM, encoding = 'latin-1')


#Select only useful columns and rename them
online_orders = df[['Order Lines/Product', 'Order Lines/Quantity', 'Order Lines/Created on']]
online_orders = online_orders.rename({'Order Lines/Product':'products', 'Order Lines/Quantity' : 'quantity_sold', 'Order Lines/Created on' : 'order_date'}, axis = 1)

bom = df_bom[['Product', 'BoM Lines/Component', 'BoM Lines/Quantity', 'Discontinued when OOS']]
bom = bom.rename({'Product':'products', 'BoM Lines/Component' : 'bom_component', 'BoM Lines/Quantity' : 'bom_quantity', 'Discontinued when OOS':'discontinued'}, axis = 1)

#Formatting the date and creating a columns for months
formatting = lambda x:datetime.strptime(x, "%Y-%m-%d %H:%M:%S")
day = lambda x:datetime(x.year, x.month, x.day).date()

online_orders['date_only'] = online_orders.order_date.apply(formatting).apply(day)
online_orders['month'] = online_orders.date_only.apply(lambda x:x.strftime('%Y-%m'))

#Group online_orders per month and product
online_orders = online_orders.groupby(['products', 'month']).quantity_sold.sum().reset_index()

#Merge online_orders with bom to have the detail of component and the quantity 
online_orders_bom = pd.merge(online_orders,bom,on=['products'], how='left')
online_orders_bom['component_quantity'] = online_orders_bom.apply((lambda x:x.quantity_sold * x.bom_quantity), axis=1)

#Filter the component df to keep only the useful columns, then create a pivot table
component_online = online_orders_bom[['bom_component','month','component_quantity']]
component_online = online_orders_bom[online_orders_bom.month <= variables.MAX_MONTH]
component_online = component_online.groupby(['bom_component', 'month']).component_quantity.sum().reset_index().pivot(columns = 'month', index = 'bom_component', values = 'component_quantity')
component_online = component_online.fillna(value=0)

#Add the info on if the product will be discontinued or not
df_disc = bom[['bom_component', 'discontinued']]
df_disc = df_disc.drop_duplicates(subset = ['bom_component'])
component_online = pd.merge(component_online,df_disc,on=['bom_component'], how='left')


#Define index_month and multiplicative coeff for the forecast (+15% everymonth except Feb (CNY), May and Nov/Dec (christmas))
index_month = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']
liste_coeff = #//confidential

def create_forecast(df):
    liste_index =  [df.columns.get_loc(c) for c in df.columns]
    liste_index_month =  [df.columns.str.split('-')[x][1] for x in range(1,len(df.columns)-1)]
    last_month = liste_index_month[-1]
    index_last_month = index_month.index(last_month)
    
    df['forecast_m+1'] = df.iloc[:,-2].apply(lambda x:x*liste_coeff[(index_last_month+1)%12])
    index_last_month +=1

    for i in range(1,6):
        df['forecast_m+'+str(i+1)] = df['forecast_m+'+str(i)].apply(lambda x:x*liste_coeff[(index_last_month+1)%12])
        index_last_month +=1
    return df

result_component_online = create_forecast(component_online)


# Add BOM supplier, average lead, max lead, frequency and MOQ
bom_mini = df_bom[['BoM Lines/Component', 'supplier', 'average_lead', 'max_lead', 'frequency', 'moq']]
bom_mini = bom_mini.rename({'BoM Lines/Component':'bom_component'}, axis = 1)
bom_mini = bom_mini.drop_duplicates()

supply_chain_online = pd.merge(result_component_online,bom_mini,on=['bom_component'], how='left')


#Select index of 4 last months of orders to calculate the average sales history
first_month = supply_chain_online.columns.get_loc('discontinued')-4
last_month = supply_chain_online.columns.get_loc('discontinued')

#calculate average_sales_history, average_sales_forecast, max_conso_forecast, safety_stock, 
supply_chain_online['average_sales_history'] = supply_chain_online.iloc[:, first_month:last_month].mean(axis=1)
supply_chain_online['average_sales_forecast'] = supply_chain_online[['forecast_m+1','forecast_m+2','forecast_m+3', 'forecast_m+4', 'forecast_m+5','forecast_m+6']].mean(axis=1)
supply_chain_online['max_conso_forecast']  = supply_chain_online[['forecast_m+1','forecast_m+2','forecast_m+3', 'forecast_m+4', 'forecast_m+5','forecast_m+6']].max(axis=1)
supply_chain_online['safety_stock']  = supply_chain_online.apply(lambda x:(((x.max_conso_forecast/30)*x.max_lead)- ((x.average_sales_forecast/30)*x.average_lead)), axis=1) 
supply_chain_online['prog'] = supply_chain_online.apply(lambda x:((x.average_sales_forecast - x.average_sales_history)/x.average_sales_history) if x.average_sales_history > 0 else 1, axis=1)
supply_chain_online['stock_mini'] = supply_chain_online.apply(lambda x: x.safety_stock + (x.average_sales_forecast*((1+x.prog)/30)*x.average_lead), axis=1)
supply_chain_online['stock_maxi'] = supply_chain_online.apply(lambda x: (x.average_sales_forecast*12)/x.frequency if x.frequency>0 else x.average_sales_forecast*12, axis=1)


#Include data about stock 
stock = pd.read_csv('stock.csv')
stock = stock.rename({'Product':'bom_component', 'Inventoried Quantity' : 'stock_quantity'}, axis = 1)
stock = stock[['bom_component', 'stock_quantity']]
stock = stock.groupby('bom_component').stock_quantity.sum().reset_index()

supply_chain_online_stock = pd.merge(supply_chain_online,stock,on=['bom_component'], how='left')
supply_chain_online_stock['stock_quantity'] = supply_chain_online_stock.stock_quantity.fillna(value = 0)

#Calculate the quantity to purchase
supply_chain_online_stock['purchase_quantity'] = supply_chain_online_stock.apply((lambda x:x.stock_maxi if x.stock_quantity<x.stock_mini else 0), axis=1)


supply_chain_online_stock .to_csv('supply_chain_online_stock.csv', index = False)
